#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "types.glsl"
#include "rng.glsl"
#include "meshdata.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0) uniform UniformBufferObject {
    mat4 camToWorld;
    mat4 viewToCam;
    uint frameIdx;
    uint64_t emitterBufferAddress;
    uint numEmitter;
};
layout(binding = 3, set = 0) readonly buffer Materials { Material materials[]; };
layout(binding = 4, set = 0) uniform sampler2D textures[];

#include "material.glsl"

layout(location = 0) rayPayloadEXT RayPayload payload;

struct Emitter {
    uint meshIdx;
    uint triangleIdx;
};

layout(buffer_reference, scalar) buffer EmitterBuffer {
    Emitter data[];
};

const int MAX_DEPTH = 10;
const int MIN_DEPTH = 1;

vec3 offsetPoint(vec3 pos, vec3 dir, vec3 normal, float offset) {
    return pos + sign(dot(dir, normal)) * offset * normal;
}

vec3 offsetPoint(HitData from, vec3 dir) {
    return offsetPoint(from.pos, dir, from.triangle.geomNormal, from.errorOffset);
}

vec3 sampleTriangle(Triangle triangle, vec2 primary, out float errorOffset, out vec3 normal) {
    float sqrtRnd1 = sqrt(primary.x);
    float u = 1.0 - sqrtRnd1;
    float v = primary.y * sqrtRnd1;

    vec3 errorDiagonal = abs((1 - u - v) * triangle.v1.pos + abs(u * triangle.v2.pos) + abs(v * triangle.v3.pos));
    errorOffset = length(errorDiagonal) * 32.0 * 1.19209e-07;

    normal = (1.0 - u - v) * triangle.v1.normal + u * triangle.v2.normal + v * triangle.v3.normal;

    return (1.0 - u - v) * triangle.v1.pos + u * triangle.v2.pos + v * triangle.v3.pos;
}

void main() {
    EmitterBuffer emitterBuffer = EmitterBuffer(emitterBufferAddress);

    // Seed the RNG
    uint rngSeed = 1337;
    uint pixelIdx = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x;
    payload.rngState = hashSeed(1337, pixelIdx, frameIdx);
    payload.weight = vec3(frameIdx);

    // Sample the camera ray
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + rngNextVec2(payload.rngState);
    const vec2 view = vec2(
        pixelCenter.x / gl_LaunchSizeEXT.x * 2.0 - 1.0,
        1.0 - pixelCenter.y / gl_LaunchSizeEXT.y * 2.0
    );
    vec4 localDir = viewToCam * vec4(view.xy, 0.0, 1.0);
    vec4 worldDir = camToWorld * vec4(localDir.xyz, 0.0);
    vec3 direction = normalize(worldDir.xyz);
    vec3 origin = (camToWorld * vec4(0, 0, 0, 1)).xyz;
    float tmin = 0.0;

    vec3 result = vec3(0);
    vec3 prefixWeight = vec3(1.0);
    float lastPdf = 1.0;
    for (int depth = 1; depth <= MAX_DEPTH; ++depth) { // depth = number of rays traced so far
        payload.hit.dist = -1;
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin, direction, 1e+38, 0);

        // Handle background hit / scene left
        if (payload.hit.dist < 0) {
            result += prefixWeight * vec3(0.0); // TODO background radiance + MIS
            break;
        }

        vec3 outDir = payload.hit.worldToShading * (-direction);

        // Handle emitter hits
        if (!isBlack(payload.hit.triangle.emission.radiance) && outDir.z > 0) { // Emitters are one-sided
            float misWeight = 1;
            if (depth > 1) {
                float cosLight = abs(dot(payload.hit.triangle.geomNormal, outDir));
                float d2 = payload.hit.dist * payload.hit.dist;
                float invNextEventPdf = payload.hit.triangle.area * numEmitter * cosLight / d2;
                float pdfRatio = 1.0 / (lastPdf * invNextEventPdf);
                misWeight = 1 / (1 + pdfRatio * pdfRatio);
            }

            if (depth >= MIN_DEPTH)
                result += prefixWeight * misWeight * payload.hit.triangle.emission.radiance;
        }

        Material material = materials[payload.hit.triangle.materialId];

        // Perform next event estimation
        uint emitterIdx = rngNextInt(payload.rngState, numEmitter);
        Emitter emitter = emitterBuffer.data[emitterIdx];
        Triangle emitterTriangle = getTriangle(emitter.meshIdx, emitter.triangleIdx);
        vec3 radiance = emitterTriangle.emission.radiance;

        // Sample point on the selected emissive triangle
        float lightPointErrorOffset;
        vec3 emitterShadingNormal;
        vec3 lightPoint = sampleTriangle(emitterTriangle, rngNextVec2(payload.rngState), lightPointErrorOffset, emitterShadingNormal);
        if (dot(emitterTriangle.geomNormal, emitterShadingNormal) < 0)
            emitterTriangle.geomNormal = -emitterTriangle.geomNormal;

        vec3 dirToLight = lightPoint - payload.hit.pos;

        if (depth >= MIN_DEPTH - 1 && depth < MAX_DEPTH && dot(emitterTriangle.geomNormal, -dirToLight) > 0) { // Check that we are on the right side of the light
            // Compute proper offsets for the shadow ray and trace it
            const float shadowEpsilon = 1e-5; // Fixed constant works here because dirToLight is not normalized yet
            vec3 p0 = offsetPoint(payload.hit, dirToLight);
            vec3 p1 = offsetPoint(lightPoint, -dirToLight, emitterTriangle.geomNormal, lightPointErrorOffset);
            payload.occluded = true;
            traceRayEXT(topLevelAS,
                gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT,
                0xff, 0, 0, 0,
                p0, shadowEpsilon,
                p1 - p0, 1 - shadowEpsilon,
                0
            );

            if (!payload.occluded) {
                float d2 = dot(dirToLight, dirToLight);
                float d = sqrt(d2);
                dirToLight /= d;
                vec3 inDir = payload.hit.worldToShading * dirToLight;

                MaterialEvaluation eval = mtlEvaluate(material, payload.hit, false, outDir, inDir);
                vec3 bsdfTimesCos = eval.bsdf * abs(inDir.z);
                float cosLight = abs(dot(emitterTriangle.geomNormal, -dirToLight));
                float invNextEventPdf = emitterTriangle.area * numEmitter * cosLight / d2;
                float pdfRatio = eval.pdf * invNextEventPdf;
                float misWeight = 1.0 / (1.0 + pdfRatio * pdfRatio);

                result += prefixWeight * misWeight * bsdfTimesCos * invNextEventPdf * radiance;
            }
        }

        // Sample the next direction
        MaterialSample dirSample = mtlSample(material, payload.hit, false, outDir, rngNextVec2(payload.rngState));
        direction = payload.hit.shadingToWorld * dirSample.inDir;
        lastPdf = dirSample.value.pdf;

        if (lastPdf == 0) // Prevent NaNs from corner cases in material sampling
            break;

        prefixWeight *= dirSample.value.bsdf * abs(dirSample.inDir.z) / lastPdf;

        origin = offsetPoint(payload.hit, direction);
        tmin = payload.hit.errorOffset;
    }

    vec4 oldVal = imageLoad(image, ivec2(gl_LaunchIDEXT.xy));
    vec3 newVal = oldVal.xyz * frameIdx / (frameIdx + 1.0) + result.xyz / (frameIdx + 1.0);
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(newVal, 1.0));
}